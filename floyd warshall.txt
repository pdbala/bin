import java.io.*;
import java.lang.*;
import java.util.*;

class AllPairShortestPath {
final static int INF = 99999, V = 4;
void floydWarshall(int dist[][])
{
int i, j, k;
for (k = 0; k < V; k++)
{
for (i = 0; i < V; i++)
{
for (j = 0; j < V; j++)
{
if (dist[i][j] > dist[i][k] + dist[k][j])
{
dist[i][j] = dist[i][k] + dist[k][j];
}
}
}
}
printSolution(dist);
}
void printSolution(int dist[][])
{
System.out.println("The following matrix shows the shortest distances between every pair of vertices");
for (int i = 0; i < V; ++i)
{
for (int j = 0; j < V; ++j)
{
System.out.print(dist[i][j] + "\t");
}
System.out.println();
}
}
public static void main(String[] args)
{
int[][] graph=new int[V][V];
Scanner sc= new Scanner(System.in);
System.out.println("Enter the graph ");
System.out.println("In place of infinite (INF) put 99999");
for (int i = 0; i < V; ++i)
{
for (int j = 0; j < V; ++j)
{
graph[i][j]=sc.nextInt();
}
}
AllPairShortestPath a = new AllPairShortestPath();
a.floydWarshall(graph);
}
}
